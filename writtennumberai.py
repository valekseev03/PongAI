# -*- coding: utf-8 -*-
"""writtenNumberAi.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L3ZsPM1BYh5Ul1_N18WZsC3q58T_x5tq

# Creating the Neural Network
"""

import tensorflow as tf
from keras import backend as K

num_cores = 4

GPU = False
CPU = True

if GPU:
    num_GPU = 1
    num_CPU = 1
if CPU:
    num_CPU = 4
    num_GPU = 0

#config = tf.ConfigProto(intra_op_parallelism_threads=num_cores,
 #                       inter_op_parallelism_threads=num_cores, 
  #                      allow_soft_placement=True,
   #                     device_count = {'CPU' : num_CPU,
    #                                    'GPU' : num_GPU}
     #                  )

#session = tf.Session(config=config)
#K.set_session(session)

from keras.datasets import mnist
(train_images, train_labels), (test_images, test_labels) = mnist.load_data()

from keras import models
from keras import layers

network = models.Sequential()
network.add(layers.Conv2D(64, kernel_size=3, activation='relu', input_shape=(28, 28, 1)))
network.add(layers.MaxPooling2D((2,2)))
network.add(layers.Conv2D(32, kernel_size=3, activation='tanh'))
network.add(layers.MaxPooling2D((2,2)))
network.add(layers.Flatten())
network.add(layers.Dropout(0.5))
network.add(layers.Dense(10, activation='softmax'))

network.compile(optimizer='adam',
                loss='categorical_crossentropy',
                metrics=['accuracy'])

train_images = train_images.reshape((60000, 28, 28, 1))
#train_images = train_images.astype('float32') / 255

test_images = test_images.reshape((10000, 28, 28, 1))
#test_images = test_images.astype('float32') / 255

from keras.utils import to_categorical

train_labels = to_categorical(train_labels)
test_labels = to_categorical(test_labels)
                             
network.fit(train_images, train_labels, epochs=3, batch_size=100, validation_data=(test_images, test_labels))

test_loss, test_acc = network.evaluate(test_images, test_labels)
print('test_acc:', test_acc)

"""# Testing that Neural Network Works"""

import matplotlib.pyplot as plt

print(network.predict(train_images[99:102]))
plt.imshow(train_images[101, :, :, 0])
plt.show()

for i in range(9):
    plt.imshow(train_images[i, :, :, 0])
    plt.show()
print(network.predict(train_images[:i+1]))

print(train_images.shape)
print(train_labels.shape)

"""# Using Neural Network On User Generated Images From Paint"""

from PIL import Image, ImageFilter, ImageOps
import numpy as np
import matplotlib.pyplot as plt
from keras import preprocessing

#import tensorflow-gpu

"""**Using Jupyter Notebok**"""

train_datagen = preprocessing.image.ImageDataGenerator(rescale=1)

for i in range(10):
    image = (Image.open("AIPics/IMG_"+str(i+4588)+".JPG"))
    #image = rawimage.copy()
    image = ImageOps.invert(image)
    image = image.rotate(270)
    image = image.resize((28,28))
    image = image.convert(mode="L", matrix=None, dither=None, palette=0, colors=256)
    array = np.asarray(image, dtype=float)
    arrayboi = array.copy()
    #print(arrayboi.flags)
    #arrayboi.setflags(write=1)
    arrayboi = train_datagen.standardize(np.copy(arrayboi))
    for a in range(len(arrayboi[:])):
        for b in range(len(arrayboi[a])):
            if arrayboi[a,b] < 150:
                arrayboi[a,b] = 0
            else:
                arrayboi[a,b] = 255
    arrayboi = np.resize(arrayboi,(1,28,28,1))
    #print(arrayboi)
    print(network.predict(arrayboi))
    plt.imshow(arrayboi[0, :, :, 0], cmap="Greys")
    plt.show()

for i in range(1):
    image = (Image.open("sevennn.png"))
    #image = rawimage.copy()
    image = ImageOps.invert(image)
    image = image.crop((0,0,712,950))
    image = image.resize((28,28))
    image = image.convert(mode="L", matrix=None, dither=None, palette=0, colors=256)
    array = np.asarray(image, dtype=float)
    arrayboi = array.copy()
    #print(arrayboi.flags)
    #arrayboi.setflags(write=1)
    arrayboi = train_datagen.standardize(np.copy(arrayboi))
    for a in range(len(arrayboi[:])):
        for b in range(len(arrayboi[a])):
            if arrayboi[a,b] < 110:
                arrayboi[a,b] = 0
            else:
                arrayboi[a,b] = 255
    arrayboi = np.resize(arrayboi,(1,28,28,1))
    #print(arrayboi)
    print(network.predict(arrayboi))
    plt.imshow(arrayboi[0, :, :, 0], cmap="Greys")
    plt.show()

"""**Using Google Colab**"""

from google.colab import drive
drive.mount('/content/gdrive')

train_datagen = preprocessing.image.ImageDataGenerator(rescale=1)

import imageio
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation
from skimage.transform import resize
from IPython.display import HTML
import warnings
warnings.filterwarnings("ignore")

for i in range(1):
    image = Image.open('/content/gdrive/My Drive/sevennn.png') #import image here
    #image = rawimage.copy()
    image = ImageOps.invert(image)
    image = image.convert(mode="L", matrix=None, dither=None, palette=0, colors=256)
    array = np.asarray(image, dtype=float)
    arrayboi = array.copy()
    #print(arrayboi.flags)
    #arrayboi.setflags(write=1)
    arrayboi = train_datagen.standardize(np.copy(arrayboi))
    for a in range(len(arrayboi[:])):
        for b in range(len(arrayboi[a])):
            if arrayboi[a,b] < 110:
                arrayboi[a,b] = 0
            else:
                arrayboi[a,b] = 255
    arrayboi = np.resize(arrayboi,(1,28,28,1))

    result = np.round(network.predict(arrayboi)) #get number result from image
    print("AI Prediction: " + str(np.argwhere(result==1.).sum()))

    plt.imshow(arrayboi[0, :, :, 0], cmap="Greys")
    plt.show()

"""--End of Necessary Code--"""

